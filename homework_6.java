/**
–ó–∞–¥–∞–Ω–∏–µ

üìå –ü–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–ª–∞—Å—Å–∞ –ù–æ—É—Ç–±—É–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∏ - –≤—ã–¥–µ–ª–∏—Ç—å –ø–æ–ª—è –∏
–º–µ—Ç–æ–¥—ã. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ java.
üìå –°–æ–∑–¥–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ—É—Ç–±—É–∫–æ–≤.
üìå –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–π (–∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã–≤–µ–¥–µ—Ç –Ω–æ—É—Ç–±—É–∫–∏, –æ—Ç–≤–µ—á–∞—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—É. –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ
—Ö—Ä–∞–Ω–∏—Ç—å –≤ Map. –ù–∞–ø—Ä–∏–º–µ—Ä:
‚Äú–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é:
1 - –û–ó–£
2 - –û–±—ä–µ–º –ñ–î
3 - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
4 - –¶–≤–µ—Ç ‚Ä¶
üìå –î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤ Map.
üìå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–æ—É—Ç–±—É–∫–∏ –∏—Ö –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –ø–æ
—É—Å–ª–æ–≤–∏—è–º.
 */

import java.lang.annotation.Retention;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;


public class homework_6 {


    public static void main(String[] args) {

        Laptop laptop1 = new Laptop("Huawei", "MateBook D 15 BoDe-WDH9 53013WRP", 15.6, "Intel Core i5 1155G7", 2.5, 4, 8, 512, "—Å–µ—Ä—ã–π –∫–æ—Å–º–æ—Å", "–±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", "Intel Iris Xe graphics");
        Laptop laptop2 = new Laptop("TECNO", "MegaBook T1 TCN-T1R5W15.512.GR", 15.6, "AMD Ryzen 5 5560U", 2.3, 6, 16, 512, "—Å–µ—Ä—ã–π", "Windows 11 Home", "AMD Radeon");
        Laptop laptop3 = new Laptop("Huawei", "MateBook 14 KLVF-X 53013PET", 14.0, "Intel Core i5 1240P", 1.7, 12, 16, 512, "—Å–µ—Ä—ã–π –∫–æ—Å–º–æ—Å", "Windows 11 Home", "Intel Iris Xe graphics");
        Laptop laptop4 = new Laptop("Xiaomi", "RedmiBook JYU4525RU", 15.6, "Intel Core i3 1115G4", 3.0, 2, 8, 256, "—Å–µ—Ä—ã–π", "Windows 11 Home", "Intel UHD Graphics");
        Laptop laptop5 = new Laptop("Apple", "MacBook Air A2681 Z15S0059F", 13.6, "Apple M2 8 core",3.5, 8, 16, 512, "—Å–µ—Ä—ã–π –∫–æ—Å–º–æ—Å", "Mac OS", "–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π");
        Laptop laptop6 = new Laptop("Acer", "Aspire 3 A315-510P-3374", 15.6, "Intel Core i3 N305", 1.8, 8, 8, 256, "—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π", "–±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", "Intel UHD Graphics");
        Laptop laptop7 = new Laptop("Microsoft Surface", "Go Platinum TNV-00004", 12.4, "Intel Core i5 1035G1", 1.0, 4, 8, 256, "—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π", "Windows 10 Professional", "Intel UHD Graphics");
        Laptop laptop8 = new Laptop("HP", "Omen 16-c0045ur 4E1R9EA", 16.1, "AMD Ryzen 7 5800H", 3.2, 8, 0, 1000, "—Ç–µ–º–Ω–æ-—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π", "Free DOS 3.0", "NVIDIA GeForce RTX 3070 –¥–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤ - 8 –ì–ë");


        Set<Laptop> laptops = new HashSet<>(Arrays.asList(laptop1, laptop2, laptop3, laptop4, laptop5, laptop6, laptop7, laptop8));
        
        for (Laptop laptop : laptops) {
            System.out.println(laptop);
        }

        findByParams(laptops);
    }

    public static void findByParams(Set<Laptop> laptops) {
        Map<String, String> params = new HashMap<>();
        params = getParams();

        boolean result = false;

        for (Laptop laptop : laptops) {
            result = false;
            for(var item : params.entrySet()) {
                if (!compareParams(laptop, item.getKey(), item.getValue())) {
                    result = false;
                    break;
                }
                result = true;
            }

            if (result) {
                System.out.println();
                System.out.println(laptop.toString());
            }
        }


        
    }

    public static String inputParam () {
        Scanner input = new Scanner(System.in,  "UTF-8");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ");
        return input.nextLine();
    }

    public static Map<String, String> getParams() {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Ü–∏—Ñ—Ä—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é:\n" + 
                                    "1 - –û–ó–£\n" + 
                                    "2 - –û–±—ä–µ–º –ñ–î\n" + 
                                    "3 - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n" + 
                                    "4 - –î–∏–∞–≥–æ–Ω–∞–ª—å\n" + 
                                    "0 - –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤");
        Map<String, String> params = new HashMap<>();
        while (true) {
            Scanner input = new Scanner(System.in, "UTF-8");
            int num = input.nextInt();

            if (num == 0) {
                break;
            }
            
            switch (num) {
                case 1:
                    params.put("ram", inputParam());
                    break;

                case 2:
                    params.put("rom", inputParam());
                    break;

                case 3:
                    params.put("os", inputParam());
                    break;
                
                case 4:
                    params.put("diagonal", inputParam());
                    break;
            }

            
        }

        return params;
    }

    public static boolean compareParams (Laptop laptop, String key, String value) {
        switch (key) {
            case "ram":
                return compareInt(laptop.getRam(), value);
                // break;

            case "rom":
                return compareInt(laptop.getRom(), value);
                // break;

            case "os":
                return compareString(laptop.getOs(), value);
                // break;
                
            case "diagonal":
                return compareDouble(laptop.getDiagonal(), value);
                // break;
        }
        return false;
    }

    public static boolean compareInt (int field, String param) {
        return field >= Integer.parseInt(param);
    }

    public static boolean compareDouble (Double field, String param) {
        return field >= Double.parseDouble(param);
    }

    public static boolean compareString (String first, String second) {
        if (first.indexOf(second) == -1) {
            return false;
        } else {
            return true;
        }
    }
}